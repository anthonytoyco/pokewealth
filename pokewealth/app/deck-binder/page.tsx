'use client'

import { useState, useEffect } from 'react'
import Image from 'next/image'

interface Card {
    id: number
    card_name: string
    estimated_price: string
    details: string
    image_filename?: string
    created_at: string
    centering_score?: number
    corners_score?: number
    edges_score?: number
    surface_score?: number
    overall_grade?: number
    is_authentic?: boolean
    authenticity_confidence?: number
}

interface CardGroup {
    id: string
    name: string
    type: 'theme' | 'set' | 'color' | 'rarity'
    cards: Card[]
    color: string
}

interface Deck {
    id: string
    name: string
    description: string
    cards: Card[]
    totalValue: number
    created_at: string
}

interface Binder {
    id: string
    name: string
    groups: CardGroup[]
    totalCards: number
    totalValue: number
    created_at: string
}

export default function DeckBinder() {
    const [cards, setCards] = useState<Card[]>([])
    const [decks, setDecks] = useState<Deck[]>([])
    const [binders, setBinders] = useState<Binder[]>([])
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState<string | null>(null)
    const [activeTab, setActiveTab] = useState<'decks' | 'binders'>('decks')
    const [showCreateDeck, setShowCreateDeck] = useState(false)
    const [showCreateBinder, setShowCreateBinder] = useState(false)
    const [newDeckName, setNewDeckName] = useState('')
    const [newBinderName, setNewBinderName] = useState('')
    const [selectedCards, setSelectedCards] = useState<Card[]>([])
    const [generatingWithAI, setGeneratingWithAI] = useState(false)

    useEffect(() => {
        fetchCards()
        fetchDecks()
        fetchBinders()
    }, [])

    const fetchCards = async () => {
        try {
            const response = await fetch('http://localhost:8000/cards')
            if (!response.ok) throw new Error('Failed to fetch cards')
            const data = await response.json()
            setCards(data)
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An error occurred')
        } finally {
            setLoading(false)
        }
    }

    const fetchDecks = async () => {
        // For now, we'll use localStorage. In a real app, this would be an API call
        const savedDecks = localStorage.getItem('pokewealth_decks')
        if (savedDecks) {
            setDecks(JSON.parse(savedDecks))
        }
    }

    const fetchBinders = async () => {
        // For now, we'll use localStorage. In a real app, this would be an API call
        const savedBinders = localStorage.getItem('pokewealth_binders')
        if (savedBinders) {
            setBinders(JSON.parse(savedBinders))
        }
    }

    const saveDecks = (newDecks: Deck[]) => {
        setDecks(newDecks)
        localStorage.setItem('pokewealth_decks', JSON.stringify(newDecks))
    }

    const saveBinders = (newBinders: Binder[]) => {
        setBinders(newBinders)
        localStorage.setItem('pokewealth_binders', JSON.stringify(newBinders))
    }

    const generateDeckWithAI = async () => {
        if (cards.length === 0) {
            setError('No cards available to generate a deck')
            return
        }

        setGeneratingWithAI(true)
        try {
            const response = await fetch('http://localhost:8000/generate-deck', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    cards: cards.map(card => ({
                        id: card.id,
                        name: card.card_name,
                        details: card.details,
                        price: card.estimated_price
                    }))
                })
            })

            if (!response.ok) throw new Error('Failed to generate deck')

            const aiDeck = await response.json()

            const newDeck: Deck = {
                id: Date.now().toString(),
                name: aiDeck.name || 'AI Generated Deck',
                description: aiDeck.description || 'Generated by AI',
                cards: aiDeck.cards.map((cardId: number) =>
                    cards.find(c => c.id === cardId)
                ).filter(Boolean),
                totalValue: Number(aiDeck.totalValue) || 0,
                created_at: new Date().toISOString()
            }

            saveDecks([...decks, newDeck])
            setShowCreateDeck(false)
            setNewDeckName('')
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to generate deck')
        } finally {
            setGeneratingWithAI(false)
        }
    }

    const generateBinderWithAI = async () => {
        if (cards.length === 0) {
            setError('No cards available to generate a binder')
            return
        }

        setGeneratingWithAI(true)
        try {
            const response = await fetch('http://localhost:8000/generate-binder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    cards: cards.map(card => ({
                        id: card.id,
                        name: card.card_name,
                        details: card.details,
                        price: card.estimated_price
                    }))
                })
            })

            if (!response.ok) throw new Error('Failed to generate binder')

            const aiBinder = await response.json()

            const newBinder: Binder = {
                id: Date.now().toString(),
                name: aiBinder.name || 'AI Generated Binder',
                groups: aiBinder.groups || [],
                totalCards: Number(aiBinder.totalCards) || 0,
                totalValue: Number(aiBinder.totalValue) || 0,
                created_at: new Date().toISOString()
            }

            saveBinders([...binders, newBinder])
            setShowCreateBinder(false)
            setNewBinderName('')
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to generate binder')
        } finally {
            setGeneratingWithAI(false)
        }
    }

    const createManualDeck = () => {
        if (!newDeckName.trim() || selectedCards.length === 0) {
            setError('Please provide a deck name and select cards')
            return
        }

        const totalValue = selectedCards.reduce((sum, card) => {
            const price = card.estimated_price ? parseFloat(card.estimated_price.replace(/[$,]/g, '')) || 0 : 0
            return sum + price
        }, 0)

        const newDeck: Deck = {
            id: Date.now().toString(),
            name: newDeckName,
            description: `Manual deck with ${selectedCards.length} cards`,
            cards: selectedCards,
            totalValue: Number(totalValue),
            created_at: new Date().toISOString()
        }

        saveDecks([...decks, newDeck])
        setShowCreateDeck(false)
        setNewDeckName('')
        setSelectedCards([])
    }

    const createManualBinder = () => {
        if (!newBinderName.trim()) {
            setError('Please provide a binder name')
            return
        }

        // Group cards by theme/set/color using simple heuristics
        const groups: CardGroup[] = []

        // Group by set (extract from details)
        const setGroups = new Map<string, Card[]>()
        cards.forEach(card => {
            const setMatch = card.details.match(/([A-Z][a-z]+ [A-Z][a-z]+)/)
            const setName = setMatch ? setMatch[1] : 'Unknown Set'
            if (!setGroups.has(setName)) {
                setGroups.set(setName, [])
            }
            setGroups.get(setName)!.push(card)
        })

        let groupId = 0
        setGroups.forEach((groupCards, setName) => {
            if (groupCards.length > 0) {
                groups.push({
                    id: `set-${groupId++}`,
                    name: setName,
                    type: 'set',
                    cards: groupCards,
                    color: getGroupColor(groupId)
                })
            }
        })

        const totalCards = cards.length
        const totalValue = cards.reduce((sum, card) => {
            const price = card.estimated_price ? parseFloat(card.estimated_price.replace(/[$,]/g, '')) || 0 : 0
            return sum + price
        }, 0)

        const newBinder: Binder = {
            id: Date.now().toString(),
            name: newBinderName,
            groups,
            totalCards,
            totalValue: Number(totalValue),
            created_at: new Date().toISOString()
        }

        saveBinders([...binders, newBinder])
        setShowCreateBinder(false)
        setNewBinderName('')
    }

    const getGroupColor = (index: number) => {
        const colors = [
            'bg-blue-100 text-blue-800',
            'bg-green-100 text-green-800',
            'bg-purple-100 text-purple-800',
            'bg-red-100 text-red-800',
            'bg-yellow-100 text-yellow-800',
            'bg-indigo-100 text-indigo-800',
            'bg-pink-100 text-pink-800',
            'bg-gray-100 text-gray-800'
        ]
        return colors[index % colors.length]
    }

    const toggleCardSelection = (card: Card) => {
        setSelectedCards(prev =>
            prev.find(c => c.id === card.id)
                ? prev.filter(c => c.id !== card.id)
                : [...prev, card]
        )
    }

    if (loading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center">
                <div className="text-center">
                    <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
                    <p className="mt-4 text-gray-600 dark:text-gray-400">Loading deck and binder tools...</p>
                </div>
            </div>
        )
    }

    return (
        <div className="min-h-screen bg-white dark:bg-[#1a1f2e]">
            <main className="container mx-auto px-6 py-12 max-w-7xl">
                {/* Header */}
                <div className="text-center mb-10 animate-fade-in">
                    <h1 className="text-6xl font-black text-[#0078ff] mb-3">
                        Deck & Binder Manager
                    </h1>
                    <p className="text-xl text-[#5a6c7d] dark:text-[#a8b2c1] font-medium">
                        Create and organize your Pokémon card collections with AI assistance
                    </p>
                </div>

                {/* Error State */}
                {error && (
                    <div className="bg-red-50 dark:bg-red-900/20 border-l-4 border-[#ff4444] rounded-lg p-4 mb-6 animate-fade-in">
                        <p className="text-[#ff4444] font-semibold">{error}</p>
                        <button
                            onClick={() => setError(null)}
                            className="mt-2 text-sm text-[#ff4444] hover:underline"
                        >
                            Dismiss
                        </button>
                    </div>
                )}

                {/* Tab Navigation */}
                <div className="flex justify-center mb-8">
                    <div className="bg-[#f8f9fb] dark:bg-[#242b3d] rounded-lg p-1 border border-[#e1e4e8] dark:border-[#3d4556]">
                        <button
                            onClick={() => setActiveTab('decks')}
                            className={`px-6 py-3 rounded-md font-bold transition-all duration-200 ${activeTab === 'decks'
                                ? 'bg-[#0078ff] text-white shadow-sm'
                                : 'text-[#5a6c7d] dark:text-[#a8b2c1] hover:text-[#0078ff]'
                                }`}
                        >
                            Decks
                        </button>
                        <button
                            onClick={() => setActiveTab('binders')}
                            className={`px-6 py-3 rounded-md font-bold transition-all duration-200 ${activeTab === 'binders'
                                ? 'bg-[#0078ff] text-white shadow-sm'
                                : 'text-[#5a6c7d] dark:text-[#a8b2c1] hover:text-[#0078ff]'
                                }`}
                        >
                            Binders
                        </button>
                    </div>
                </div>

                {/* Decks Tab */}
                {activeTab === 'decks' && (
                    <div className="space-y-8">
                        {/* Create Deck Section */}
                        <div className="bg-[#f8f9fb] dark:bg-[#242b3d] rounded-2xl border border-[#e1e4e8] dark:border-[#3d4556] p-8">
                            <div className="flex justify-between items-center mb-6">
                                <h2 className="text-3xl font-black text-[#2c3e50] dark:text-[#f0f0f0]">
                                    Create New Deck
                                </h2>
                                <div className="flex gap-3">
                                    <button
                                        onClick={() => setShowCreateDeck(!showCreateDeck)}
                                        className="px-6 py-3 bg-white dark:bg-[#1a1f2e] border border-[#e1e4e8] dark:border-[#3d4556] text-[#2c3e50] dark:text-[#f0f0f0] font-bold rounded-lg hover:bg-[#f8f9fb] dark:hover:bg-[#242b3d] transition-colors"
                                    >
                                        Manual Deck
                                    </button>
                                    <button
                                        onClick={generateDeckWithAI}
                                        disabled={generatingWithAI || cards.length === 0}
                                        className="px-6 py-3 bg-[#0078ff] hover:bg-[#0060d9] text-white font-bold rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed shadow-sm"
                                    >
                                        {generatingWithAI ? 'Generating...' : 'AI Generate Deck'}
                                    </button>
                                </div>
                            </div>

                            {showCreateDeck && (
                                <div className="space-y-6">
                                    <div>
                                        <label className="block text-sm font-bold text-[#2c3e50] dark:text-[#f0f0f0] mb-2">
                                            Deck Name
                                        </label>
                                        <input
                                            type="text"
                                            value={newDeckName}
                                            onChange={(e) => setNewDeckName(e.target.value)}
                                            className="w-full px-4 py-3 border border-[#e1e4e8] dark:border-[#3d4556] rounded-lg focus:ring-2 focus:ring-[#0078ff] dark:bg-[#1a1f2e] dark:text-[#f0f0f0]"
                                            placeholder="Enter deck name..."
                                        />
                                    </div>

                                    <div>
                                        <label className="block text-sm font-bold text-[#2c3e50] dark:text-[#f0f0f0] mb-2">
                                            Select Cards ({selectedCards.length} selected)
                                        </label>
                                        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 max-h-64 overflow-y-auto border border-[#e1e4e8] dark:border-[#3d4556] rounded-lg p-4">
                                            {cards.map((card, index) => (
                                                <div
                                                    key={card.id || `card-${index}`}
                                                    onClick={() => toggleCardSelection(card)}
                                                    className={`relative cursor-pointer rounded-lg border-2 transition-all duration-200 ${selectedCards.find(c => c.id === card.id)
                                                        ? 'border-[#0078ff] bg-[#0078ff]/10'
                                                        : 'border-[#e1e4e8] dark:border-[#3d4556] hover:border-[#0078ff]/50'
                                                        }`}
                                                >
                                                    {card.image_filename ? (
                                                        <img
                                                            src={`http://localhost:8000/cards/${card.id}/image`}
                                                            alt={card.card_name}
                                                            className="w-full h-32 object-contain rounded-lg"
                                                        />
                                                    ) : (
                                                        <div className="w-full h-32 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center">
                                                            <span className="text-gray-400 text-xs">No Image</span>
                                                        </div>
                                                    )}
                                                    <div className="p-2">
                                                        <p className="text-xs font-bold text-[#2c3e50] dark:text-[#f0f0f0] truncate">
                                                            {card.card_name}
                                                        </p>
                                                        <p className="text-xs text-[#0078ff] font-semibold">
                                                            {card.estimated_price || 'N/A'}
                                                        </p>
                                                    </div>
                                                    {selectedCards.find(c => c.id === card.id) && (
                                                        <div className="absolute top-1 right-1 w-5 h-5 bg-[#0078ff] rounded-full flex items-center justify-center">
                                                            <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                                            </svg>
                                                        </div>
                                                    )}
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    <div className="flex gap-3">
                                        <button
                                            onClick={createManualDeck}
                                            disabled={!newDeckName.trim() || selectedCards.length === 0}
                                            className="px-6 py-3 bg-[#0078ff] hover:bg-[#0060d9] text-white font-bold rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed shadow-sm"
                                        >
                                            Create Deck
                                        </button>
                                        <button
                                            onClick={() => {
                                                setShowCreateDeck(false)
                                                setNewDeckName('')
                                                setSelectedCards([])
                                            }}
                                            className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white font-bold rounded-lg transition-colors"
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Decks List */}
                        <div className="space-y-6">
                            <h3 className="text-2xl font-black text-[#2c3e50] dark:text-[#f0f0f0]">
                                Your Decks ({decks.length})
                            </h3>

                            {decks.length === 0 ? (
                                <div className="text-center py-16 bg-[#f8f9fb] dark:bg-[#242b3d] rounded-2xl border border-[#e1e4e8] dark:border-[#3d4556]">
                                    <div className="w-24 h-24 mx-auto mb-6 bg-white dark:bg-[#1a1f2e] rounded-2xl flex items-center justify-center border border-[#e1e4e8] dark:border-[#3d4556]">
                                        <svg className="w-12 h-12 text-[#5a6c7d]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                        </svg>
                                    </div>
                                    <h4 className="text-xl font-black text-[#2c3e50] dark:text-[#f0f0f0] mb-3">
                                        No decks created yet
                                    </h4>
                                    <p className="text-[#5a6c7d] dark:text-[#a8b2c1] mb-6">
                                        Create your first deck manually or let AI generate one for you!
                                    </p>
                                </div>
                            ) : (
                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                    {decks.map((deck) => (
                                        <div
                                            key={deck.id}
                                            className="bg-[#f8f9fb] dark:bg-[#242b3d] rounded-2xl border border-[#e1e4e8] dark:border-[#3d4556] p-6 hover:shadow-lg transition-all duration-200 card-hover-lift deck-stack group-animate"
                                        >
                                            <h4 className="text-xl font-black text-[#2c3e50] dark:text-[#f0f0f0] mb-2">
                                                {deck.name}
                                            </h4>
                                            <p className="text-sm text-[#5a6c7d] dark:text-[#a8b2c1] mb-4">
                                                {deck.description}
                                            </p>
                                            <div className="space-y-2 mb-4">
                                                <div className="flex justify-between">
                                                    <span className="text-sm font-semibold text-[#5a6c7d] dark:text-[#a8b2c1]">Cards:</span>
                                                    <span className="text-sm font-bold text-[#2c3e50] dark:text-[#f0f0f0]">{deck.cards.length}</span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-sm font-semibold text-[#5a6c7d] dark:text-[#a8b2c1]">Value:</span>
                                                    <span className="text-sm font-bold text-[#0078ff]">${Number(deck.totalValue).toFixed(2)}</span>
                                                </div>
                                            </div>
                                            <p className="text-xs text-gray-500 dark:text-gray-400">
                                                Created {new Date(deck.created_at).toLocaleDateString()}
                                            </p>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* Binders Tab */}
                {activeTab === 'binders' && (
                    <div className="space-y-8">
                        {/* Create Binder Section */}
                        <div className="bg-[#f8f9fb] dark:bg-[#242b3d] rounded-2xl border border-[#e1e4e8] dark:border-[#3d4556] p-8">
                            <div className="flex justify-between items-center mb-6">
                                <h2 className="text-3xl font-black text-[#2c3e50] dark:text-[#f0f0f0]">
                                    Create New Binder
                                </h2>
                                <div className="flex gap-3">
                                    <button
                                        onClick={() => setShowCreateBinder(!showCreateBinder)}
                                        className="px-6 py-3 bg-white dark:bg-[#1a1f2e] border border-[#e1e4e8] dark:border-[#3d4556] text-[#2c3e50] dark:text-[#f0f0f0] font-bold rounded-lg hover:bg-[#f8f9fb] dark:hover:bg-[#242b3d] transition-colors"
                                    >
                                        Manual Binder
                                    </button>
                                    <button
                                        onClick={generateBinderWithAI}
                                        disabled={generatingWithAI || cards.length === 0}
                                        className="px-6 py-3 bg-[#0078ff] hover:bg-[#0060d9] text-white font-bold rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed shadow-sm"
                                    >
                                        {generatingWithAI ? 'Generating...' : 'AI Generate Binder'}
                                    </button>
                                </div>
                            </div>

                            {showCreateBinder && (
                                <div className="space-y-6">
                                    <div>
                                        <label className="block text-sm font-bold text-[#2c3e50] dark:text-[#f0f0f0] mb-2">
                                            Binder Name
                                        </label>
                                        <input
                                            type="text"
                                            value={newBinderName}
                                            onChange={(e) => setNewBinderName(e.target.value)}
                                            className="w-full px-4 py-3 border border-[#e1e4e8] dark:border-[#3d4556] rounded-lg focus:ring-2 focus:ring-[#0078ff] dark:bg-[#1a1f2e] dark:text-[#f0f0f0]"
                                            placeholder="Enter binder name..."
                                        />
                                    </div>

                                    <div className="flex gap-3">
                                        <button
                                            onClick={createManualBinder}
                                            disabled={!newBinderName.trim()}
                                            className="px-6 py-3 bg-[#0078ff] hover:bg-[#0060d9] text-white font-bold rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed shadow-sm"
                                        >
                                            Create Binder
                                        </button>
                                        <button
                                            onClick={() => {
                                                setShowCreateBinder(false)
                                                setNewBinderName('')
                                            }}
                                            className="px-6 py-3 bg-gray-500 hover:bg-gray-600 text-white font-bold rounded-lg transition-colors"
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Binders List */}
                        <div className="space-y-6">
                            <h3 className="text-2xl font-black text-[#2c3e50] dark:text-[#f0f0f0]">
                                Your Binders ({binders.length})
                            </h3>

                            {binders.length === 0 ? (
                                <div className="text-center py-16 bg-[#f8f9fb] dark:bg-[#242b3d] rounded-2xl border border-[#e1e4e8] dark:border-[#3d4556]">
                                    <div className="w-24 h-24 mx-auto mb-6 bg-white dark:bg-[#1a1f2e] rounded-2xl flex items-center justify-center border border-[#e1e4e8] dark:border-[#3d4556]">
                                        <svg className="w-12 h-12 text-[#5a6c7d]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                        </svg>
                                    </div>
                                    <h4 className="text-xl font-black text-[#2c3e50] dark:text-[#f0f0f0] mb-3">
                                        No binders created yet
                                    </h4>
                                    <p className="text-[#5a6c7d] dark:text-[#a8b2c1] mb-6">
                                        Create your first binder manually or let AI organize your cards!
                                    </p>
                                </div>
                            ) : (
                                <div className="space-y-6">
                                    {binders.map((binder) => (
                                        <div
                                            key={binder.id}
                                            className="bg-[#f8f9fb] dark:bg-[#242b3d] rounded-2xl border border-[#e1e4e8] dark:border-[#3d4556] p-6 group-animate"
                                        >
                                            <div className="flex justify-between items-start mb-6">
                                                <div>
                                                    <h4 className="text-2xl font-black text-[#2c3e50] dark:text-[#f0f0f0] mb-2">
                                                        {binder.name}
                                                    </h4>
                                                    <div className="flex gap-6 text-sm text-[#5a6c7d] dark:text-[#a8b2c1]">
                                                        <span>{binder.totalCards} cards</span>
                                                        <span>${Number(binder.totalValue).toFixed(2)} value</span>
                                                        <span>{binder.groups.length} groups</span>
                                                    </div>
                                                </div>
                                                <p className="text-xs text-gray-500 dark:text-gray-400">
                                                    Created {new Date(binder.created_at).toLocaleDateString()}
                                                </p>
                                            </div>

                                            {/* Binder Groups - Visual Binder Layout */}
                                            <div className="space-y-6">
                                                {binder.groups.map((group, groupIndex) => (
                                                    <div
                                                        key={group.id}
                                                        className="bg-white dark:bg-[#1a1f2e] rounded-xl border border-[#e1e4e8] dark:border-[#3d4556] p-6 shadow-sm group-animate"
                                                    >
                                                        {/* Group Header */}
                                                        <div className="flex items-center justify-between mb-4">
                                                            <div className="flex items-center gap-3">
                                                                <div className={`w-3 h-3 rounded-full ${getGroupColor(groupIndex).split(' ')[0].replace('bg-', 'bg-')}`}></div>
                                                                <h5 className="text-lg font-black text-[#2c3e50] dark:text-[#f0f0f0]">
                                                                    {group.name}
                                                                </h5>
                                                                <span className={`px-3 py-1 rounded-full text-xs font-bold ${getGroupColor(groupIndex)}`}>
                                                                    {group.type.toUpperCase()}
                                                                </span>
                                                            </div>
                                                            <div className="text-right">
                                                                <p className="text-sm font-bold text-[#5a6c7d] dark:text-[#a8b2c1]">
                                                                    {group.cards.length} cards
                                                                </p>
                                                                <p className="text-xs text-[#5a6c7d] dark:text-[#a8b2c1]">
                                                                    Group {groupIndex + 1}
                                                                </p>
                                                            </div>
                                                        </div>

                                                        {/* Cards Grid - Binder Style */}
                                                        <div className="grid grid-cols-6 md:grid-cols-8 lg:grid-cols-12 gap-2">
                                                            {group.cards.map((card, cardIndex) => (
                                                                <div
                                                                    key={`${group.id}-${card.id || cardIndex}`}
                                                                    className="group relative aspect-[2/3] bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden hover:shadow-md transition-all duration-200 hover:scale-105 card-animate card-hover-lift"
                                                                    style={{
                                                                        animationDelay: `${cardIndex * 50}ms`
                                                                    }}
                                                                >
                                                                    {card.id ? (
                                                                        <>
                                                                            <img
                                                                                src={`http://localhost:8000/cards/${card.id}/image?v=${card.id}`}
                                                                                alt={card.card_name}
                                                                                className="w-full h-full object-cover rounded-lg"
                                                                                onError={(e) => {
                                                                                    const img = e.currentTarget;
                                                                                    img.style.display = 'none';
                                                                                    const fallback = img.parentElement?.querySelector('.image-fallback') as HTMLElement | null;
                                                                                    if (fallback) fallback.style.display = 'flex';
                                                                                }}
                                                                            />
                                                                            {/* Fallback for broken images */}
                                                                            <div className="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-700 image-fallback" style={{ display: 'none' }}>
                                                                                <div className="text-center">
                                                                                    <svg className="w-6 h-6 mx-auto mb-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                                                    </svg>
                                                                                    <span className="text-xs text-gray-400">No Image</span>
                                                                                </div>
                                                                            </div>
                                                                        </>
                                                                    ) : (
                                                                        <div className="w-full h-full flex items-center justify-center">
                                                                            <div className="text-center">
                                                                                <svg className="w-6 h-6 mx-auto mb-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                                                </svg>
                                                                                <span className="text-xs text-gray-400">No Image</span>
                                                                            </div>
                                                                        </div>
                                                                    )}

                                                                    {/* Hover Overlay */}
                                                                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-200 rounded-lg flex items-center justify-center opacity-0 group-hover:opacity-100">
                                                                        <div className="text-center text-white">
                                                                            <p className="text-xs font-bold truncate px-1">
                                                                                {card.card_name}
                                                                            </p>
                                                                            <p className="text-xs font-semibold text-yellow-300">
                                                                                {card.estimated_price || 'N/A'}
                                                                            </p>
                                                                        </div>
                                                                    </div>

                                                                    {/* Card Number Badge */}
                                                                    <div className="absolute top-1 left-1 w-5 h-5 bg-black/70 text-white text-xs font-bold rounded-full flex items-center justify-center">
                                                                        {cardIndex + 1}
                                                                    </div>
                                                                </div>
                                                            ))}

                                                            {/* Show More Cards Indicator */}
                                                            {group.cards.length > 12 && (
                                                                <div className="aspect-[2/3] bg-gradient-to-br from-[#0078ff]/10 to-[#0078ff]/20 border-2 border-dashed border-[#0078ff]/30 rounded-lg flex items-center justify-center">
                                                                    <div className="text-center">
                                                                        <div className="w-8 h-8 bg-[#0078ff] rounded-full flex items-center justify-center mb-2 mx-auto">
                                                                            <span className="text-white font-bold text-sm">+</span>
                                                                        </div>
                                                                        <span className="text-xs font-bold text-[#0078ff]">
                                                                            +{group.cards.length - 12}
                                                                        </span>
                                                                        <p className="text-xs text-[#5a6c7d] dark:text-[#a8b2c1] mt-1">
                                                                            more cards
                                                                        </p>
                                                                    </div>
                                                                </div>
                                                            )}
                                                        </div>

                                                        {/* Group Stats */}
                                                        <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
                                                            <div className="flex justify-between items-center text-sm">
                                                                <span className="text-[#5a6c7d] dark:text-[#a8b2c1]">
                                                                    Total Value: <span className="font-bold text-[#0078ff]">
                                                                        ${Number(group.cards.reduce((sum, card) => {
                                                                            const price = card.estimated_price ? parseFloat(card.estimated_price.replace(/[$,]/g, '')) || 0 : 0;
                                                                            return sum + price;
                                                                        }, 0)).toFixed(2)}
                                                                    </span>
                                                                </span>
                                                                <span className="text-[#5a6c7d] dark:text-[#a8b2c1]">
                                                                    Avg Grade: <span className="font-bold text-[#2c3e50] dark:text-[#f0f0f0]">
                                                                        {group.cards.length > 0 ?
                                                                            (group.cards.reduce((sum, card) => sum + (card.overall_grade || 0), 0) / group.cards.length).toFixed(1)
                                                                            : 'N/A'
                                                                        }
                                                                    </span>
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </main>
        </div>
    )
}
